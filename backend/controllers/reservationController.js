import reservationModel from '../models/reservationModel.js';
import userModel from '../models/userModel.js';
import sendMail from '../utils/email.js';

const RESERVATION_STATUS = {
  PENDING: 'pending',
  APPROVED: 'approved',
  CANCELED: 'canceled' 
};

const USER_ROLES = {
  ADMIN: 'admin'
};

const EMAIL_TEMPLATES = {
  reservation_success: (date, branch, guests) => ({
    subject: '[Kokoria] ‚úÖ ƒê√£ nh·∫≠n y√™u c·∫ßu ƒë·∫∑t b√†n',
    text: `Xin ch√†o,

Ch√∫ng t√¥i ƒë√£ nh·∫≠n ƒë∆∞·ª£c y√™u c·∫ßu ƒë·∫∑t b√†n c·ªßa b·∫°n v·ªõi c√°c th√¥ng tin sau:
üìÖ Ng√†y: ${formatDate(date)}
üè™ Chi nh√°nh: ${branch}
üë• S·ªë l∆∞·ª£ng kh√°ch: ${guests}

Tr·∫°ng th√°i hi·ªán t·∫°i: ƒêang ch·ªù x√°c nh·∫≠n  
Ch√∫ng t√¥i s·∫Ω xem x√©t v√† ph·∫£n h·ªìi trong th·ªùi gian s·ªõm nh·∫•t.

C·∫£m ∆°n b·∫°n ƒë√£ ch·ªçn d·ªãch v·ª• c·ªßa ch√∫ng t√¥i!

---
Kokoria  
Hotline: (+84) 0708796719`
  }),

  reservation_approved: (date, branch, guests) => ({
    subject: '[Kokoria] üéâ ƒê·∫∑t b√†n ƒë√£ ƒë∆∞·ª£c x√°c nh·∫≠n',
    text: `Xin ch√∫c m·ª´ng,

Y√™u c·∫ßu ƒë·∫∑t b√†n c·ªßa b·∫°n ƒë√£ ƒë∆∞·ª£c X√ÅC NH·∫¨N th√†nh c√¥ng.

Th√¥ng tin ƒë·∫∑t b√†n:
üìÖ Ng√†y & gi·ªù: ${formatDate(date)}
üè™ Chi nh√°nh: ${branch}
üë• S·ªë l∆∞·ª£ng kh√°ch: ${guests}

L∆∞u √Ω:
- Vui l√≤ng ƒë·∫øn ƒë√∫ng gi·ªù
- N·∫øu c·∫ßn thay ƒë·ªïi, vui l√≤ng li√™n h·ªá tr∆∞·ªõc √≠t nh·∫•t 2 gi·ªù
- Vui l√≤ng xu·∫•t tr√¨nh email n√†y khi ƒë·∫øn

Ch√∫ng t√¥i r·∫•t mong ƒë∆∞·ª£c ph·ª•c v·ª• b·∫°n!

---
Kokoria  
Hotline: (+84) 0708796719`
  }),

  reservation_canceled: (date, branch, guests, reason) => ({
    subject: '[Kokoria] ‚ùå ƒê·∫∑t b√†n ƒë√£ b·ªã h·ªßy',
    text: `Xin ch√†o,

Ch√∫ng t√¥i r·∫•t ti·∫øc ph·∫£i th√¥ng b√°o r·∫±ng y√™u c·∫ßu ƒë·∫∑t b√†n c·ªßa b·∫°n ƒë√£ b·ªã H·ª¶Y.

Th√¥ng tin ƒë·∫∑t b√†n:
üìÖ Ng√†y & gi·ªù: ${formatDate(date)}
üè™ Chi nh√°nh: ${branch}
üë• S·ªë l∆∞·ª£ng kh√°ch: ${guests}

L√Ω do h·ªßy: ${reason}

B·∫°n c√≥ th·ªÉ:
- Ch·ªçn th·ªùi gian kh√°c
- Ch·ªçn chi nh√°nh kh√°c
- G·ªçi hotline ƒë·ªÉ ƒë∆∞·ª£c h·ªó tr·ª£: (+84) 0708796719

R·∫•t xin l·ªói v√¨ s·ª± b·∫•t ti·ªán n√†y.

---
Kokoria  
Hotline: (+84) 0708796719`
  })
};

const formatDate = (date) => {
  return new Date(date).toLocaleDateString('vi-VN', {
    weekday: 'long',
    year: 'numeric',
    month: 'long',
    day: 'numeric',
    hour: '2-digit',
    minute: '2-digit'
  });
};

const isAdmin = async (userId) => {
  const userData = await userModel.findById(userId);
  return userData && userData.role === USER_ROLES.ADMIN;
};

const handleError = (res, error, message = 'C√≥ l·ªói x·∫£y ra') => {
  console.error('L·ªói:', error);
  res.json({ success: false, message });
};

const sendReservationEmail = async (email, templateKey, ...args) => {
  try {
    const { subject, text } = EMAIL_TEMPLATES[templateKey](...args);
    await sendMail({ to: email, subject, text });
  } catch (error) {
    console.error('G·ª≠i email th·∫•t b·∫°i:', error);
  }
};

const getTodayStart = () => {
  const today = new Date();
  today.setHours(0, 0, 0, 0);
  return today;
};

const getTomorrowStart = () => {
  const tomorrow = new Date();
  tomorrow.setDate(tomorrow.getDate() + 1);
  tomorrow.setHours(0, 0, 0, 0);
  return tomorrow;
};

// Controller th√™m ƒë·∫∑t b√†n
const addReservation = async (req, res) => {
  try {
    const { userId, email, phone, date, guests, branch, message } = req.body;

    if (!email || !phone || !date || !guests || !branch) {
      return res.json({ 
        success: false, 
        message: 'Vui l√≤ng ƒëi·ªÅn ƒë·∫ßy ƒë·ªß th√¥ng tin b·∫Øt bu·ªôc' 
      });
    }

    const newReservation = new reservationModel({
      userId,
      email,
      phone,
      date,
      guests,
      branch,
      message: message || '',
      status: RESERVATION_STATUS.PENDING,
      processedBy: null,
      reason: '',
    });

    await newReservation.save();

    await sendReservationEmail(email, 'reservation_success', date, branch, guests);

    res.json({
      success: true,
      message: 'ƒê·∫∑t b√†n th√†nh c√¥ng! Vui l√≤ng ki·ªÉm tra email ƒë·ªÉ xem th√¥ng tin chi ti·∫øt.',
      reservationId: newReservation._id,
    });

  } catch (error) {
    handleError(res, error, 'Kh√¥ng th·ªÉ t·∫°o ƒë·∫∑t b√†n. Vui l√≤ng th·ª≠ l·∫°i.');
  }
};

// Controller l·∫•y danh s√°ch ƒë·∫∑t b√†n
const listReservations = async (req, res) => {
  try {
    const { dateFilter = 'future', startDate, endDate } = req.query;
    const { userId } = req.body;
    const filter = {};

    if (!await isAdmin(userId)) {
      filter["userId"] = userId;
    }

    const today = getTodayStart();

    switch (dateFilter) {
      case 'today':
        filter["date"] = { $gte: today, $lt: getTomorrowStart() };
        break;
      case 'future':
        filter["date"] = { $gte: today };
        break;
      case 'past':
        filter["date"] = { $lt: today };
        break;
      case 'range':
        if (startDate && endDate) {
          filter["date"] = {
            $gte: new Date(startDate),
            $lte: new Date(endDate)
          };
        }
        break;
      default:
        break;
    }

    const reservations = await reservationModel.find(filter).sort({ date: 1 });

    res.json({
      isSuccess: true,
      data: reservations,
      total: reservations.length,
      filter: dateFilter
    });

  } catch (error) {
    handleError(res, error, 'Kh√¥ng th·ªÉ l·∫•y danh s√°ch ƒë·∫∑t b√†n');
  }
};

// Controller c·∫≠p nh·∫≠t tr·∫°ng th√°i ƒë·∫∑t b√†n
const updateReservation = async (req, res) => {
  try {
    const { userId, reservationId, status, reason } = req.body;

    if (!await isAdmin(userId)) {
      return res.json({ success: false, message: 'B·∫°n kh√¥ng c√≥ quy·ªÅn th·ª±c hi·ªán ch·ª©c nƒÉng n√†y' });
    }

    if (!reservationId || !status) {
      return res.json({ success: false, message: 'Thi·∫øu th√¥ng tin reservationId ho·∫∑c status' });
    }

    if (!Object.values(RESERVATION_STATUS).includes(status)) {
      return res.json({ success: false, message: 'Tr·∫°ng th√°i kh√¥ng h·ª£p l·ªá' });
    }

    const updateData = {
      status,
      processedBy: userId,
      updatedAt: new Date()
    };

    if (status === RESERVATION_STATUS.CANCELED) {
      updateData.reason = reason && reason.trim() !== "" 
        ? reason.trim() 
        : "Nh√† h√†ng kh√¥ng th·ªÉ x·ª≠ l√Ω ƒë∆°n ƒë·∫∑t b√†n n√†y";
    } else {
      updateData.reason = "";
    }

    const reservation = await reservationModel.findByIdAndUpdate(reservationId, updateData, { new: true });

    if (!reservation) {
      return res.json({ success: false, message: 'Kh√¥ng t√¨m th·∫•y ƒë∆°n ƒë·∫∑t b√†n' });
    }

    if (status === RESERVATION_STATUS.APPROVED) {
      await sendReservationEmail(reservation.email, 'reservation_approved', reservation.date, reservation.branch, reservation.guests);
    } else if (status === RESERVATION_STATUS.CANCELED) {
      await sendReservationEmail(reservation.email, 'reservation_canceled', reservation.date, reservation.branch, reservation.guests, reservation.reason);
    }

    res.json({ 
      success: true, 
      message: `ƒê√£ c·∫≠p nh·∫≠t tr·∫°ng th√°i ƒë·∫∑t b√†n th√†nh "${status}"`,
      reservation: {
        id: reservation._id,
        status: reservation.status,
        reason: reservation.reason
      }
    });

  } catch (error) {
    handleError(res, error, 'Kh√¥ng th·ªÉ c·∫≠p nh·∫≠t tr·∫°ng th√°i ƒë·∫∑t b√†n');
  }
};

export { addReservation, listReservations, updateReservation };
