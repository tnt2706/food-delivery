import React, { useState, useContext } from "react";
import "./ChatWidget.css";
import { StoreContext } from "../../context/StoreContext";
import axios from "axios";
import { useNavigate } from 'react-router-dom';
import { getBestMatchingResponse } from "../../utils/chatMatcher";
import chatData from "./chatData.json";

const chatOptions = [
    { emoji: "üçΩÔ∏è", label: "B·∫°n c√≥ m√≥n g√¨ trong menu?" },
    { emoji: "üîî", label: "T√¥i mu·ªën ƒë·∫∑t b√†n" },
    { emoji: "üìÖ", label: "Xem l·∫°i b√†n t√¥i ƒë√£ ƒë·∫∑t" },
    { emoji: "üìû", label: "Li√™n h·ªá v·ªõi b·∫°n b·∫±ng c√°ch n√†o?" },
    { emoji: "üì©", label: "T√¥i mu·ªën ƒë·ªÉ l·∫°i g√≥p √Ω" },
    { emoji: "üîç", label: "T√¥i c√≥ c√¢u h·ªèi kh√°c" }
];

const ChatWidget = () => {
    const navigate = useNavigate();
    const { url, token } = useContext(StoreContext);
    const [isVisible, setIsVisible] = useState(true);
    const [messages, setMessages] = useState([
        { type: "bot", text: "üëã Xin ch√†o! M√¨nh c√≥ th·ªÉ gi√∫p g√¨ cho b·∫°n?" },
    ]);
    const [inputValue, setInputValue] = useState("");
    const [showOptions, setShowOptions] = useState(false);

    const sendMessage = (type, text) => {
        setMessages((prev) => [...prev, { type, text }]);
    };

    const getStatusIcon = (status) => {
        switch (status?.toLowerCase()) {
            case "confirmed": return "‚úÖ";
            case "pending": return "‚è≥";
            case "cancelled": return "‚ùå";
            case "completed": return "‚ú®";
            default: return "üìã";
        }
    };

    const getListReservation = async () => {
        try {
            const response = await axios.get(`${url}/api/reservation/list`, {
                headers: { token },
            });

            const data = response?.data?.data || [];
            if (data.length === 0) return "Hi·ªán t·∫°i b·∫°n ch∆∞a c√≥ b√†n n√†o ƒë∆∞·ª£c ƒë·∫∑t.";

            let message = "\nüìã **Danh s√°ch ƒë·∫∑t b√†n c·ªßa b·∫°n**\n\n";
            for (let reservation of data) {
                const date = reservation.date || "Kh√¥ng c√≥ th·ªùi gian";
                const branch = reservation.branch || "Kh√¥ng c√≥ chi nh√°nh";
                const guests = reservation.guests || "Kh√¥ng r√µ";
                const status = reservation.status || "pending";
                const statusIcon = getStatusIcon(status);

                message += `‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n`;
                message += `üïí Th·ªùi gian: ${date}\n`;
                message += `üìç Chi nh√°nh: ${branch}\n`;
                message += `üë• S·ªë kh√°ch: ${guests}\n`;
                message += `üìå Tr·∫°ng th√°i: ${statusIcon} ${status}\n\n`;
            }

            message += `‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n**T·ªïng c·ªông: ${data.length} l∆∞·ª£t ƒë·∫∑t b√†n**`;
            return message;
        } catch (error) {
            console.error("Failed to fetch reservation list:", error);
            return "‚ùå C√≥ l·ªói x·∫£y ra khi l·∫•y danh s√°ch ƒë·∫∑t b√†n. Vui l√≤ng th·ª≠ l·∫°i sau.";
        }
    };


    const callGemini = async (message) => {
        try {
            const response = await axios.get(`${url}/api/chat/gemini`,
                {
                    params: { message },
                }
            );

            const reply = response?.data?.message || "Kh√¥ng nh·∫≠n ƒë∆∞·ª£c ph·∫£n h·ªìi t·ª´ Gemini.";
            return reply;
        } catch (error) {
            console.error("L·ªói khi g·ªçi Gemini:", error);
            return "‚ùå C√≥ l·ªói x·∫£y ra khi g·ª≠i c√¢u h·ªèi ƒë·∫øn chat bot. Vui l√≤ng h√£y th·ª≠ l·∫°i!";
        }
    };

    const handleOptionClick = async (optionOrText) => {
        const label = typeof optionOrText === "string" ? optionOrText : optionOrText.label;
        sendMessage("user", label);

        switch (label) {
            case "B·∫°n c√≥ m√≥n g√¨ trong menu?":
                sendMessage("bot", `üëâ Xem menu ƒë·∫ßy ƒë·ªß t·∫°i: https://kokoria.vercel.app\n‚Ä¢ Chicken üçó  \n‚Ä¢ K-Food üá∞üá∑  \n‚Ä¢ Tteokbokki üå∂Ô∏è  \n‚Ä¢ Bibimbap ü•£  \n‚Ä¢ Sides üçü  \n‚Ä¢ Desserts üç∞`);
                break;
            case "T√¥i mu·ªën ƒë·∫∑t b√†n":
                sendMessage("bot", `üîî ƒê∆∞a b·∫°n ƒë·∫øn trang ƒë·∫∑t b√†n...`);
                setTimeout(() => navigate("/reservation"), 600);
                break;
            case "Xem l·∫°i b√†n t√¥i ƒë√£ ƒë·∫∑t":
                const msg = await getListReservation();
                sendMessage("bot", msg);
                break;
            case "Li√™n h·ªá v·ªõi b·∫°n b·∫±ng c√°ch n√†o?":
                sendMessage("bot", `üìû B·∫°n c√≥ th·ªÉ g·ªçi ƒë·∫øn **070.879.6719** ho·∫∑c nh·∫Øn tr·ª±c ti·∫øp ·ªü ƒë√¢y nh√©!`);
                break;
            case "T√¥i mu·ªën ƒë·ªÉ l·∫°i g√≥p √Ω":
                sendMessage("bot", `‚ú® M√¨nh r·∫•t mong nh·∫≠n ƒë∆∞·ª£c g√≥p √Ω t·ª´ b·∫°n. H√£y g√µ v√†o ƒë√¢y nh√©!`);
                break;
            case "T√¥i c√≥ c√¢u h·ªèi kh√°c":
                sendMessage("bot", `Tuy·ªát v·ªùi! G√µ c√¢u h·ªèi b·∫°n c·∫ßn nh√©.`);
                break;
            default:
                // const reply = getBestMatchingResponse(label, chatData);
                const reply =  await callGemini(label);
                sendMessage("bot", reply);
        }
    };

    const handleSendMessage = async () => {
        const text = inputValue.trim();
        setInputValue("")
        if (!text) return;
        await handleOptionClick(text);
        setInputValue("");
    };

    if (!isVisible) {
        return (
            <button className="reopen-button" onClick={() => setIsVisible(true)}>
            </button>
        );
    }

    return (
        <div className="chat-widget-container">
            <div className="chat-header">
                <span className="logo">üí¨ Kokoria</span>
                <button className="close-button" onClick={() => setIsVisible(false)}>‚úñ</button>
            </div>

            <div className="chat-body">
                <div className="option-wrapper">
                    <button
                        className="toggle-options"
                        onClick={() => setShowOptions(!showOptions)}
                    >
                        {showOptions ? "‚ñ≤ ·∫®n tu·ª≥ ch·ªçn" : "‚ñº Hi·ªán tu·ª≥ ch·ªçn"}
                    </button>

                    {showOptions && (
                        <div className="option-list">
                            {chatOptions.map((option, idx) => (
                                <button
                                    key={idx}
                                    className="chat-option"
                                    onClick={() => handleOptionClick(option)}
                                >
                                    <span className="emoji">{option.emoji}</span> {option.label}
                                </button>
                            ))}
                        </div>
                    )}
                </div>

                <div className="chat-log">
                    {messages.map((msg, idx) => (
                        <div key={idx} className={`chat-bubble ${msg.type}`}>
                            <div className="chat-icon">{msg.type === "user" ? "üßë" : "ü§ñ"}</div>
                            <div className="chat-text">
                                {msg.text.split("\n").map((line, i) => (
                                    <div key={i}>{line}</div>
                                ))}
                            </div>
                        </div>
                    ))}
                </div>
            </div>

            <div className="chat-footer">
                <input
                    type="text"
                    placeholder="Nh·∫≠p tin nh·∫Øn..."
                    value={inputValue}
                    onChange={(e) => setInputValue(e.target.value)}
                    onKeyDown={(e) => e.key === "Enter" && handleSendMessage()}
                />
                <button className="send-button" onClick={handleSendMessage}>‚û§</button>
            </div>
        </div>
    );
};

export default ChatWidget;
